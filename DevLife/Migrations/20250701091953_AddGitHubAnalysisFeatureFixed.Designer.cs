// <auto-generated />
using System;
using DevLife.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevLife.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701091953_AddGitHubAnalysisFeatureFixed")]
    partial class AddGitHubAnalysisFeatureFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevLife.Models.BugChase.BugChaseScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BugsAvoided")
                        .HasColumnType("int");

                    b.Property<int>("CoffeeCollected")
                        .HasColumnType("int");

                    b.Property<int>("DeadlinesAvoided")
                        .HasColumnType("int");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("MeetingsAvoided")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<long>("SurvivalTime")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WeekendsCollected")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayedAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Score", "Distance", "PlayedAt");

                    b.ToTable("BugChaseScores");
                });

            modelBuilder.Entity("DevLife.Models.BugChase.BugChaseStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BestScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalBugsAvoided")
                        .HasColumnType("int");

                    b.Property<int>("TotalCoffeeCollected")
                        .HasColumnType("int");

                    b.Property<int>("TotalDeadlinesAvoided")
                        .HasColumnType("int");

                    b.Property<int>("TotalDistance")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TotalMeetingsAvoided")
                        .HasColumnType("int");

                    b.Property<long>("TotalSurvivalTime")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalWeekendsCollected")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BugChaseStats");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.CodeChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuggyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CodeChallenges");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.DailyChallenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BonusMultiplier")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChallengeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CodeChallengeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeDate")
                        .IsUnique();

                    b.HasIndex("CodeChallengeId");

                    b.ToTable("DailyChallenges");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.UserGameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AIBuggyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIChallengeDescription")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("AIChallengeTitle")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AICorrectCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AIExplanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AITopic")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("CodeChallengeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDailyChallenge")
                        .HasColumnType("bit");

                    b.Property<double>("LuckMultiplier")
                        .HasColumnType("float");

                    b.Property<DateTime>("PlayedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PointsBet")
                        .HasColumnType("int");

                    b.Property<int>("PointsWon")
                        .HasColumnType("int");

                    b.Property<bool>("UserChoice")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CodeChallengeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGameSessions");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.UserStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastDailyChallenge")
                        .HasColumnType("datetime2");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("TotalGamesWon")
                        .HasColumnType("int");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageBestPracticesScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageCorrectnessScore")
                        .HasColumnType("float");

                    b.Property<double>("AveragePerformanceScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageReadabilityScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageTimePerTask")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentRoastStreak")
                        .HasColumnType("int");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<int>("HighestScore")
                        .HasColumnType("int");

                    b.Property<int>("JuniorTasksCompleted")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastSubmission")
                        .HasColumnType("datetime2");

                    b.Property<int>("LongestRoastStreak")
                        .HasColumnType("int");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<int>("LowestScore")
                        .HasColumnType("int");

                    b.Property<int>("MiddleTasksCompleted")
                        .HasColumnType("int");

                    b.Property<int>("PerfectScores")
                        .HasColumnType("int");

                    b.Property<string>("RecentScoresJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeniorTasksCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TotalPraises")
                        .HasColumnType("int");

                    b.Property<int>("TotalRoasts")
                        .HasColumnType("int");

                    b.Property<int>("TotalSubmissions")
                        .HasColumnType("int");

                    b.Property<int>("TotalTimeSpentMinutes")
                        .HasColumnType("int");

                    b.Property<string>("UnlockedAchievementsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AverageScore");

                    b.HasIndex("LastSubmission");

                    b.HasIndex("TotalSubmissions");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("CodeRoastStats");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BestPracticesScore")
                        .HasColumnType("int");

                    b.Property<string>("CodeSmellsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeStyle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CorrectnessScore")
                        .HasColumnType("int");

                    b.Property<string>("DetectedPatternsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImprovementPointsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int");

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<string>("PositivePointsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReadabilityScore")
                        .HasColumnType("int");

                    b.Property<string>("RedFlagsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoastMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoastSeverity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmittedCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicalFeedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSpentMinutes")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("OverallScore");

                    b.HasIndex("TaskId", "OverallScore");

                    b.HasIndex("UserId", "SubmittedAt");

                    b.ToTable("CodeRoastSubmissions");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DifficultyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("EstimatedMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ExamplesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAIGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("StarterCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TestCasesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Topic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("TechStack", "DifficultyLevel", "IsActive");

                    b.ToTable("CodeRoastTasks");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("GitHubAnalysisResultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GitHubAnalysisResultId");

                    b.HasIndex("UserId", "GitHubAnalysisResultId")
                        .IsUnique();

                    b.HasIndex("UserId", "SavedAt");

                    b.ToTable("GitHubAnalysisFavorites");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisDetailsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnalyzedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CelebrityDevelopersJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodeCommentingScore")
                        .HasColumnType("int");

                    b.Property<int>("CommitMessageQuality")
                        .HasColumnType("int");

                    b.Property<string>("GitHubUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("OverallScore")
                        .HasColumnType("int");

                    b.Property<string>("PersonalityDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PersonalityType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProjectStructureScore")
                        .HasColumnType("int");

                    b.Property<int>("RepositoriesAnalyzed")
                        .HasColumnType("int");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SharedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StrengthsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCommits")
                        .HasColumnType("int");

                    b.Property<int>("TotalFiles")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VariableNamingScore")
                        .HasColumnType("int");

                    b.Property<string>("WeaknessesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GitHubUsername");

                    b.HasIndex("OverallScore");

                    b.HasIndex("IsPublic", "ShareCount");

                    b.HasIndex("UserId", "AnalyzedAt");

                    b.ToTable("GitHubAnalysisResults");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageCommentingScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageCommitQuality")
                        .HasColumnType("float");

                    b.Property<double>("AverageNamingScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageOverallScore")
                        .HasColumnType("float");

                    b.Property<double>("AverageStructureScore")
                        .HasColumnType("float");

                    b.Property<int>("CurrentStreak")
                        .HasColumnType("int");

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("int");

                    b.Property<string>("FavoriteLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("FirstAnalysis")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastAnalysis")
                        .HasColumnType("datetime2");

                    b.Property<int>("LongestStreak")
                        .HasColumnType("int");

                    b.Property<string>("MostCommonPersonalityType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RecentAnalysesJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShareCount")
                        .HasColumnType("int");

                    b.Property<int>("TotalAnalyses")
                        .HasColumnType("int");

                    b.Property<int>("TotalCommitsAnalyzed")
                        .HasColumnType("int");

                    b.Property<int>("TotalRepositoriesAnalyzed")
                        .HasColumnType("int");

                    b.Property<string>("UnlockedAchievementsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AverageOverallScore");

                    b.HasIndex("CurrentStreak");

                    b.HasIndex("LastAnalysis");

                    b.HasIndex("TotalAnalyses");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("GitHubAnalysisStats");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubRepository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnalysisResultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AnalyzedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CommitsAnalyzed")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("FilesAnalyzed")
                        .HasColumnType("int");

                    b.Property<int>("ForksCount")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PrimaryLanguage")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RepoCommentingScore")
                        .HasColumnType("int");

                    b.Property<int>("RepoCommitQuality")
                        .HasColumnType("int");

                    b.Property<int>("RepoNamingScore")
                        .HasColumnType("int");

                    b.Property<int>("RepoStructureScore")
                        .HasColumnType("int");

                    b.Property<string>("RepositoryDetailsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisResultId");

                    b.HasIndex("AnalyzedAt");

                    b.HasIndex("PrimaryLanguage", "StarsCount");

                    b.ToTable("GitHubRepositories");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<int>("BelievabilityScore")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExcuseText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("RatingCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TagsJson")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("UsageCount");

                    b.HasIndex("AverageRating", "RatingCount");

                    b.HasIndex("BelievabilityScore", "IsActive");

                    b.HasIndex("Category", "Type", "IsActive");

                    b.ToTable("MeetingExcuses");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseFavorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("MeetingExcuseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserRating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MeetingExcuseId");

                    b.HasIndex("UserId", "MeetingExcuseId")
                        .IsUnique();

                    b.HasIndex("UserId", "SavedAt");

                    b.ToTable("MeetingExcuseFavorites");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageBelievability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("FavoriteCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FavoriteType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastExcuseGenerated")
                        .HasColumnType("datetime2");

                    b.Property<int>("LongestStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RecentExcusesJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("TotalExcusesGenerated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalFavorites")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("UnlockedAchievementsJson")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStreak");

                    b.HasIndex("LastExcuseGenerated");

                    b.HasIndex("LongestStreak");

                    b.HasIndex("TotalExcusesGenerated");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MeetingExcuseStats");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MeetingExcuseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("WasSuccessful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UsedAt");

                    b.HasIndex("MeetingExcuseId", "UsedAt");

                    b.HasIndex("UserId", "UsedAt");

                    b.ToTable("MeetingExcuseUsages");
                });

            modelBuilder.Entity("DevLife.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TechStack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ZodiacSign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DevLife.Models.BugChase.BugChaseScore", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.BugChase.BugChaseStats", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.DailyChallenge", b =>
                {
                    b.HasOne("DevLife.Models.CodeCasino.CodeChallenge", "CodeChallenge")
                        .WithMany()
                        .HasForeignKey("CodeChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeChallenge");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.UserGameSession", b =>
                {
                    b.HasOne("DevLife.Models.CodeCasino.CodeChallenge", "CodeChallenge")
                        .WithMany()
                        .HasForeignKey("CodeChallengeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CodeChallenge");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.CodeCasino.UserStats", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastStats", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastSubmission", b =>
                {
                    b.HasOne("DevLife.Models.CodeRoast.CodeRoastTask", "Task")
                        .WithMany("Submissions")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisFavorite", b =>
                {
                    b.HasOne("DevLife.Models.GitHubAnalysis.GitHubAnalysisResult", "GitHubAnalysisResult")
                        .WithMany("Favorites")
                        .HasForeignKey("GitHubAnalysisResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GitHubAnalysisResult");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisResult", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisStats", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubRepository", b =>
                {
                    b.HasOne("DevLife.Models.GitHubAnalysis.GitHubAnalysisResult", "AnalysisResult")
                        .WithMany()
                        .HasForeignKey("AnalysisResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnalysisResult");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseFavorite", b =>
                {
                    b.HasOne("DevLife.Models.MeetingExcuse.MeetingExcuse", "MeetingExcuse")
                        .WithMany("Favorites")
                        .HasForeignKey("MeetingExcuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingExcuse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseStats", b =>
                {
                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuseUsage", b =>
                {
                    b.HasOne("DevLife.Models.MeetingExcuse.MeetingExcuse", "MeetingExcuse")
                        .WithMany("UsageHistory")
                        .HasForeignKey("MeetingExcuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeetingExcuse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevLife.Models.CodeRoast.CodeRoastTask", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("DevLife.Models.GitHubAnalysis.GitHubAnalysisResult", b =>
                {
                    b.Navigation("Favorites");
                });

            modelBuilder.Entity("DevLife.Models.MeetingExcuse.MeetingExcuse", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("UsageHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
